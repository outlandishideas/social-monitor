<?php

abstract class MetricTest extends PHPUnit_Framework_TestCase
{
	protected $metric;
	protected $emptyPresence;

	public function setUp()
	{
		parent::setUp();
        defined('APPLICATION_PATH')
        || define('APPLICATION_PATH', __DIR__ . '/../../application');
        require_once 'Zend/Loader/Autoloader.php';
        $autoloader = Zend_Loader_Autoloader::getInstance();
        $resourceLoader = new Zend_Application_Module_Autoloader(array(
            'namespace' => '',
            'basePath'  => APPLICATION_PATH
        ));
        $resourceLoader->addResourceType('exception', 'exceptions/', 'Exception');
        $resourceLoader->addResourceType('util', 'util/', 'Util');
        $resourceLoader->addResourceType('refactored', 'models/refactored/', 'NewModel');
        $resourceLoader->addResourceType('metric', 'metrics/', 'Metric');
        $resourceLoader->addResourceType('badge', 'badges/', 'Badge');

		$this->setUpMetric();

		$this->emptyPresence = $this->getMockBuilder('NewModel_Presence')
									->disableOriginalConstructor()
									->getMock()
		;
		$this->emptyPresence->method('getHistoricStream')->willReturn(null);
		$this->emptyPresence->method('getHistoricStreamMeta')->willReturn(null);
		$this->emptyPresence->method('getHistoricData')->willReturn(array());
		$this->emptyPresence->method('getFacebookEngagement')->willReturn(null);
		$this->emptyPresence->method('getKloutScore')->willReturn(null);
		$this->emptyPresence->method('getPopularity')->willReturn(0);
		$this->emptyPresence->method('getTargetAudienceDate')->willReturn(null);
		$this->emptyPresence->method('getTargetAudience')->willReturn(null);
		$this->emptyPresence->method('getRatioRepliesToOthersPosts')->willReturn(0);
		$this->emptyPresence->method('getResponseData')->willReturn(null);
	}

	abstract protected function setUpMetric();

	/**
	 * @group metrics
	 */
	public function testEmptyFacebookPresence() {
		$this->emptyPresence->method('getType')->willReturn(NewModel_PresenceType::FACEBOOK());
		$ret = $this->metric->calculate($this->emptyPresence, new DateTime('now -30 days'), new DateTime());
		$this->assertNull($ret);
	}

	/**
	 * @group metrics
	 */
	public function testEmptyTwitterPresence() {
		$this->emptyPresence->method('getType')->willReturn(NewModel_PresenceType::TWITTER());
		$ret = $this->metric->calculate($this->emptyPresence, new DateTime('now -30 days'), new DateTime());
		$this->assertNull($ret);
	}

	/**
	 * @group metrics
	 */
	public function testEmptySinaWeiboPresence() {
		$this->emptyPresence->method('getType')->willReturn(NewModel_PresenceType::SINA_WEIBO());
		$ret = $this->metric->calculate($this->emptyPresence, new DateTime('now -30 days'), new DateTime());
		$this->assertNull($ret);
	}


	public function historicStreamMetaData()
	{
		return array(
			array(
				array(
					array('date' => 'X', 'number_of_actions' => 0, 'number_of_links' => 0, 'number_of_bc_links' => 0),
					array('date' => 'X', 'number_of_actions' => 0, 'number_of_links' => 0, 'number_of_bc_links' => 0),
					array('date' => 'X', 'number_of_actions' => 0, 'number_of_links' => 0, 'number_of_bc_links' => 0),
					array('date' => 'X', 'number_of_actions' => 0, 'number_of_links' => 0, 'number_of_bc_links' => 0),
					array('date' => 'X', 'number_of_actions' => 0, 'number_of_links' => 0, 'number_of_bc_links' => 0)
				),
				array(
					'actions' => 0,
					'relevance' => 0
				)
			),
			array(
				array(
					array('date' => 'X', 'number_of_actions' => 3, 'number_of_links' => 3, 'number_of_bc_links' => 3),
					array('date' => 'X', 'number_of_actions' => 4, 'number_of_links' => 4, 'number_of_bc_links' => 4),
					array('date' => 'X', 'number_of_actions' => 5, 'number_of_links' => 5, 'number_of_bc_links' => 5),
					array('date' => 'X', 'number_of_actions' => 6, 'number_of_links' => 6, 'number_of_bc_links' => 6),
					array('date' => 'X', 'number_of_actions' => 7, 'number_of_links' => 7, 'number_of_bc_links' => 7)
				),
				array(
					'actions' => 5,
					'relevance' => 5
				)
			),
			array(
				array(
				),
				array(
					'actions' => null,
					'relevance' => null
				)
			)
		);
	}
}